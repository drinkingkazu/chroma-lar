#!/usr/bin/env python3
# Created by Ben Land

import argparse
import importlib
import importlib.util
import os
import sys
from timeit import default_timer as timer
import database
import numpy as np
np.seterr(over="ignore")

print("Welcome to PyRAT!")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='runs a pyrat simulation or analysis module')
    parser.add_argument('module',help='a pyrate module')
    parser.add_argument('--input','-i',help='read chroma events from a root file instead of simulating')
    parser.add_argument('--output','-o',help='save chroma events to a root file for future use')
    parser.add_argument('--set','-s',default=[],action='append',nargs=2,metavar=('FIELD','VALUE'),help='set a database field to value')
    parser.add_argument('--evalset','-es',default=[],action='append',nargs=2,metavar=('FIELD','VALUE'),help='set a database field to the evaluation of value')
    parser.add_argument('--vis',nargs='?',metavar='FILE',default=False,const=True,help='visualize instead of running event loop (optionally view events in a file)')
    parser.add_argument('--white',action='store_true',help='visualize with a white background instead of black')
    parser.add_argument('--db',nargs='+',metavar='PACKAGE',default=[],help='load additional database packages')

    parser.add_argument('--run',default=None,type=int,help='specify a run number')
    
    args = parser.parse_args()
    
    t_start = timer()
    
    # Load and sanity check the specified pyrat module
    spec = importlib.util.spec_from_file_location('pyrat_macro', args.module,
                                                  submodule_search_locations=[os.path.dirname(__file__)])
    if not spec:
        raise FileNotFoundError('module %s not found'%args.module)
    mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(mod)
    if '__process_event__' not in mod.__dict__:
        print('%s is not a pyrat module.'%args.module)
        sys.exit(1)
        
    t_load = timer()
    print('module loaded in %0.1f s' % (t_load - t_start))
        
    # These parameters are passed to the __opt_exports__ methods in database packages
    opts = {'run':args.run}
    
    # Load the default data package, and other user supplied databases
    db = database.Database('data',**opts)
    for db_path in args.db:
        db.load_package(db_path,**opts)
    
    t_database = timer()
    print('database loaded in %0.1f s' % (t_database - t_load))
    
    # Database configuration by module is optional
    if '__configure__' in mod.__dict__:
        mod.__configure__(db)    
        
    # Finally, set anything passed by command line
    for field,value in args.set:
        db[field] = value #hmm
    for field,value in args.evalset:
        db[field] = eval(value) #hmm
        
    t_configure = timer()
    print('database configured in %0.1f s' % (t_configure - t_database))
    
    # Geometry definition in module is optional
    if '__define_geometry__' in mod.__dict__:
        geom = mod.__define_geometry__(db)
        if geom is None:
            sim = None
        else:
            from chroma.loader import create_geometry_from_obj
            from chroma.sim import Simulation
            geom = create_geometry_from_obj(geom)
            if not args.vis and args.input is None:
                sim = Simulation(geom,geant4_processes=db.chroma_g4_processes,
                                 photon_tracking=db.chroma_photon_tracking,
                                 particle_tracking=db.chroma_particle_tracking)
            else:
                sim = None
    else:
        geom = None
        sim = None
        
    t_geom = timer()
    print('geometry built in %0.1f s' % (t_geom - t_configure))
    
    if args.vis:
        if geom is None:
            print('No geometry to visualize!')
            sys.exit(1)
        import pygame
        pygame.init()
        from chroma import Camera, EventViewer
        if isinstance(args.vis, str):
            print('Viewing ' + args.vis)
            camera = EventViewer(geom, args.vis, size=(1000,1000))
            camera.photons_max = db.viewer_photons_max
            # camera.photons_max_steps = db.viewer_photons_max_steps
            # camera.photons_only_type = db.viewer_photons_only_type
            # camera.photons_detected_only = db.viewer_photons_detected_only
            # camera.photons_track_size = db.viewer_photons_track_size
        else:
            print('Viewing geometry')
            camera = Camera(geom, size=(1000,1000),background=(0xFFFFFFFF if args.white else 0x00000000))
        camera.run()
        sys.exit(0)
    
    # Event loop is here
    if '__simulation_start__' in mod.__dict__:
        mod.__simulation_start__(db)
        
    if args.input is None:
        gen = mod.__event_generator__(db)
    else:
        import chroma.io.root as rootio
        gen = rootio.RootReader(args.input)
    if hasattr(db, "num_events"):
        from tqdm import tqdm
        gen = tqdm(gen, total=db.num_events, desc="Simulating events", ncols=100, 
                   unit='ev', unit_scale=True, dynamic_ncols=True)

    if args.output or hasattr(db, 'output'):
        output = args.output or getattr(db, 'output')
        db.output = output
        print('saving events to %s' % output)
        import chroma.io.root as rootio
        output = rootio.RootWriter(output,detector=geom)
        def process_event(db,ev): #TODO: consider modular event loop
            output.write_event(ev)
            mod.__process_event__(db,ev)
    else:
        def process_event(db,ev):
            mod.__process_event__(db,ev)
            
    if sim is None:
        any(process_event(db,ev) for ev in gen)
    else:
        it = sim.simulate(gen, run_daq=db.chroma_daq,
                          photons_per_batch=db.chroma_photons_per_batch,
                          keep_photons_beg=db.chroma_keep_photons_beg,
                          keep_photons_end=db.chroma_keep_photons_end,
                          keep_hits=db.chroma_keep_hits,
                          keep_flat_hits=db.chroma_keep_flat_hits,
                          max_steps=db.chroma_max_steps)
        any(process_event(db,ev) for ev in it)
        
    if args.output is not None:
        output.close()
        
    if '__simulation_end__' in mod.__dict__:
        mod.__simulation_end__(db)
        
    t_end = timer()
    print('pyrat exiting after %0.1f s' % (t_end - t_start))
    
